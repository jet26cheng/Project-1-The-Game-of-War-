




.title {
    color: white;
    font-size: 40px;
}


.rules {
    width: 50%;
    color: white;
    font-size: 18px;
    text-align: center;
}


body {
    margin: 0;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    height: 100vh;
    gap: .5rem;
    cursor: pointer;
    padding-top: 20px;
    background-color: darkgreen;
     
     /* margin: 0 auto;
      display: flex; 
     flex-direction: column;
     justify-content: space-between;
     align-items: center; */
      
} 

/*
center display box 

display flex
flex-direction column
justify-content center 
align item center  
 */

 /* for player one box and player 2 box 

 display flex-direction column flex-start 
 
 display flex direction coljumn flex-end
  */



.player1box {
    
    display: flex;
    flex-direction: column;
    height: 50%;
    width: 500px;
    align-self: flex-start;
    align-items: center;
    border: 1px solid black;
    padding: 50px
} 

h1 {
     color: white;
}
.centerbox {
    border: solid black;
    height: ;
}

.player2box {
    display: flex;
    flex-direction: column;
    height: 50%;
    width: 500px;
    align-self: flex-end;
    align-items: center;
    padding: 50px;
}

.name2Input {
    display: flex;
    height: 10px;
    width: 50px;
}
.player-1-deck {
    display: flex;
    width: 150px;
    height: 200px;
    border: 2px solid black;
    justify-content: center;
    align-items: center;
    font-size:50px ;
    background-color: darkblue;
    border-radius: .5rem;
    color: white;
}

.player-1-card-slot {
    display: flex;
    width: 150px;
    height: 200px;
    border: 2px solid black;
    justify-content: center;
    align-items: center;
    font-size:40px ;
    background-color: white;
    border-radius: .5rem;
            
}

.player-2-deck {
    display: flex;
    width: 150px;
    height: 200px;
    border: 2px solid black;
    justify-content: center;
    align-items: center;
    font-size:50px ;
    background-color: darkred;
    border-radius: .5rem;
    color: white;
    

}

.player-2-card-slot {
    display: flex;
    width: 150px;
    height: 200px;
    border: 1px solid black;
    justify-content: center;
    align-items: center;
    font-size:30px ;
    background-color: white;
    border-radius: .5rem;

}


.deck {
    height: 100px;
    width: 10%;
    border: 1px solid black ;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 50px;
    color: white;
}


.player-1-card-slot {
    margin: 39px;
}

.result-box {
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px solid black;
    padding: 20px;
}

.player-2-card-slot {
    margin: 39px;
}

/* this was extremely confusing for me at first, but what i want to do is design the 
cards value and have them appear as it is being flipped up*/

.card {
    position: relative;
    height: 100%;
    width: 100%;
    border: 1px solid black;
    border-radius: .5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 5rem;
}

.black.card {
    color: black;
}

.red.card {
    color: red;
}

/* so i never used ::before so i did some research and found that ::before creates a pseudo-element 
that is the first child of the selected element for exmaple I found the data value of the example card i used 
which was the 9 of spades and i put the value onto the card itself so the we the people can see it physcially 
 - link https://developer.mozilla.org/en-US/docs/Web/CSS/::before */

 /* ::after follows the same principle as ::before so what  i just found out here is that it creates another pwseudo-element and it will be the last element of the selected element 
    i want.
    -link https://developer.mozilla.org/en-US/docs/Web/CSS/::after */ 
.card::before,
.card::after {
    /* so i'm not too too familiar with attr() but after researching i found that attr() is retrieving the value of a attribute from a selected 
    element and is able to be used in the stylesheet! what that means is that when i grabbed data-value i was grabbing the 9 of spades since that was my example 
    value of the card. and that was being displayed  
    -link https://developer.mozilla.org/en-US/docs/Web/CSS/attr */


    position: absolute;
    content: attr(data-value);
    font-size: 1rem;

}

/* so what i did here was with the help of my software engineering friends was strictly control the first element i added onto the card.
so i can display it on the top left corner of the card  */
.card::before {
    top: .5rem;
    left: .5rem;
}

.card::after {
    bottom: .5rem;
    right: .5rem;
}